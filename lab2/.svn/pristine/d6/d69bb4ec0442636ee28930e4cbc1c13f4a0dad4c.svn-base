#include <lcom/lcf.h>
#include <lcom/timer.h>

#include <stdint.h>

#include "i8254.h"

int(timer_set_frequency)(uint8_t timer, uint32_t freq) {

  //uint32_t div = TIMER_FREQ / freq;

  return 0;
}

int(timer_subscribe_int)(uint8_t *bit_no) {
  /* To be implemented by the students */
  printf("%s is not yet implemented!\n", __func__);

  return 1;
}

int(timer_unsubscribe_int)() {
  /* To be implemented by the students */
  printf("%s is not yet implemented!\n", __func__);

  return 1;
}

void(timer_int_handler)() {
  /* To be implemented by the students */
  printf("%s is not yet implemented!\n", __func__);
}

int(timer_get_conf)(uint8_t timer, uint8_t *st) {

  if (timer != 0 | timer != 1 | timer != 2)
    return 1;

  uint32_t read_rb; //variable used to store read configuration

  read_rb = TIMER_RB_CMD | TIMER_RB_SEL(timer) | TIMER_RB_COUNT_;

  //writes to the control register
  if (sys_outb(TIMER_CTRL, read_rb) != OK)
    return 1;

  if (util_sys_inb(TIMER_0 + timer, st) != OK)
    return 1;

  *st = (uint8_t) read_rb;

  return 0;
}

int(timer_display_conf)(uint8_t timer, uint8_t st,
                        enum timer_status_field field) {
  union timer_status_field_val conf;

  if (field == tsf_all) {

    conf.byte = st;
  }

  else if (field == tsf_initial) {

    if ((st & TIMER_LSB) == TIMER_LSB) {
      conf.in_mode = LSB_only;
    }

    else if ((st & TIMER_MSB) == TIMER_MSB) {
      conf.in_mode = MSB_only;
    }

    else if ((st & TIMER_LSB_MSB) == TIMER_LSB_MSB) {
      conf.in_mode = MSB_after_LSB;
    }

    else {
      conf.in_mode = INVAL_val;
      return 1;
    }
  }

  else if (field == tsf_mode) {
  }

  return 0;
}
