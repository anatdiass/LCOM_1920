\hypertarget{mouse_8c}{}\section{mouse.\+c File Reference}
\label{mouse_8c}\index{mouse.\+c@{mouse.\+c}}
{\ttfamily \#include $<$lcom/lcf.\+h$>$}\newline
{\ttfamily \#include $<$stdint.\+h$>$}\newline
{\ttfamily \#include \char`\"{}mouse.\+h\char`\"{}}\newline
Include dependency graph for mouse.\+c\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=234pt]{mouse_8c__incl}
\end{center}
\end{figure}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
int \hyperlink{mouse_8c_a9da18257ff113b686bb826d154bfaa87}{mouse\+\_\+subscribe\+\_\+int} (uint8\+\_\+t $\ast$bit\+\_\+no)
\begin{DoxyCompactList}\small\item\em Subscribes mouse interrupts. \end{DoxyCompactList}\item 
int \hyperlink{mouse_8c_a685ad2706aca36d9869a30a19b9f446a}{mouse\+\_\+unsubscribe\+\_\+int} ()
\begin{DoxyCompactList}\small\item\em Unsubscribes mouse interrupts. \end{DoxyCompactList}\item 
void() \hyperlink{mouse_8c_a210374b50462acdedab00df64d5cea3c}{mouse\+\_\+ih} ()
\item 
int \hyperlink{mouse_8c_acccec4ad0e781cfa7cfc9717dbd8941b}{enable\+Data\+Reporting} ()
\begin{DoxyCompactList}\small\item\em Enables stream mode data reporting. \end{DoxyCompactList}\item 
int \hyperlink{mouse_8c_a630c5bb9cbfcca20fac7347ff46794dc}{disable\+Data\+Reporting} ()
\begin{DoxyCompactList}\small\item\em Disables stream mode data reporting. \end{DoxyCompactList}\item 
void \hyperlink{mouse_8c_a354be65898ab3c1972788a51bc7e9e5a}{mouse\+\_\+process\+\_\+packets} (struct packet $\ast$pp)
\begin{DoxyCompactList}\small\item\em Receives an incomplete packet and parses it. \end{DoxyCompactList}\item 
int \hyperlink{mouse_8c_af705497321f2987d5d850326bbbdaa00}{write\+\_\+command} (uint8\+\_\+t command)
\begin{DoxyCompactList}\small\item\em Writes byte to mouse. \end{DoxyCompactList}\item 
void \hyperlink{mouse_8c_aa771b78747261f5007b749e21b29e233}{mouse\+\_\+gesture\+\_\+handler} (struct mouse\+\_\+ev $\ast$evt, uint8\+\_\+t x\+\_\+len, uint8\+\_\+t tolerance)
\begin{DoxyCompactList}\small\item\em the function detects if the user draws an inverted V, from left to right and how it is drawn \end{DoxyCompactList}\item 
struct mouse\+\_\+ev $\ast$ \hyperlink{mouse_8c_a839adb4af0b6075983e495bc84847af7}{detect\+Mouse\+Event} (struct packet $\ast$pp)
\begin{DoxyCompactList}\small\item\em function detects the events that occur in the state machine \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Variables}
\begin{DoxyCompactItemize}
\item 
int \hyperlink{mouse_8c_afc170e6da803f15497a6b9eec2652975}{mouse\+\_\+hook\+ID}
\item 
uint8\+\_\+t \hyperlink{mouse_8c_a96f44d20f1dbf1c8785a7bc99a46164c}{byte}
\item 
struct mouse\+\_\+ev \hyperlink{mouse_8c_a67f46e33de30d253017c715ed5b3d64e}{event}
\end{DoxyCompactItemize}


\subsection{Function Documentation}
\mbox{\Hypertarget{mouse_8c_a839adb4af0b6075983e495bc84847af7}\label{mouse_8c_a839adb4af0b6075983e495bc84847af7}} 
\index{mouse.\+c@{mouse.\+c}!detect\+Mouse\+Event@{detect\+Mouse\+Event}}
\index{detect\+Mouse\+Event@{detect\+Mouse\+Event}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{detect\+Mouse\+Event()}{detectMouseEvent()}}
{\footnotesize\ttfamily struct mouse\+\_\+ev$\ast$ detect\+Mouse\+Event (\begin{DoxyParamCaption}\item[{struct packet $\ast$}]{pp }\end{DoxyParamCaption})}



function detects the events that occur in the state machine 


\begin{DoxyParams}{Parameters}
{\em pp} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
struct mouse\+\_\+ev$\ast$ 
\end{DoxyReturn}
\mbox{\Hypertarget{mouse_8c_a630c5bb9cbfcca20fac7347ff46794dc}\label{mouse_8c_a630c5bb9cbfcca20fac7347ff46794dc}} 
\index{mouse.\+c@{mouse.\+c}!disable\+Data\+Reporting@{disable\+Data\+Reporting}}
\index{disable\+Data\+Reporting@{disable\+Data\+Reporting}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{disable\+Data\+Reporting()}{disableDataReporting()}}
{\footnotesize\ttfamily int disable\+Data\+Reporting (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Disables stream mode data reporting. 

\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=350pt]{mouse_8c_a630c5bb9cbfcca20fac7347ff46794dc_cgraph}
\end{center}
\end{figure}
\mbox{\Hypertarget{mouse_8c_acccec4ad0e781cfa7cfc9717dbd8941b}\label{mouse_8c_acccec4ad0e781cfa7cfc9717dbd8941b}} 
\index{mouse.\+c@{mouse.\+c}!enable\+Data\+Reporting@{enable\+Data\+Reporting}}
\index{enable\+Data\+Reporting@{enable\+Data\+Reporting}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{enable\+Data\+Reporting()}{enableDataReporting()}}
{\footnotesize\ttfamily int enable\+Data\+Reporting (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Enables stream mode data reporting. 

\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=350pt]{mouse_8c_acccec4ad0e781cfa7cfc9717dbd8941b_cgraph}
\end{center}
\end{figure}
\mbox{\Hypertarget{mouse_8c_aa771b78747261f5007b749e21b29e233}\label{mouse_8c_aa771b78747261f5007b749e21b29e233}} 
\index{mouse.\+c@{mouse.\+c}!mouse\+\_\+gesture\+\_\+handler@{mouse\+\_\+gesture\+\_\+handler}}
\index{mouse\+\_\+gesture\+\_\+handler@{mouse\+\_\+gesture\+\_\+handler}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{mouse\+\_\+gesture\+\_\+handler()}{mouse\_gesture\_handler()}}
{\footnotesize\ttfamily void mouse\+\_\+gesture\+\_\+handler (\begin{DoxyParamCaption}\item[{struct mouse\+\_\+ev $\ast$}]{evt,  }\item[{uint8\+\_\+t}]{x\+\_\+len,  }\item[{uint8\+\_\+t}]{tolerance }\end{DoxyParamCaption})}



the function detects if the user draws an inverted V, from left to right and how it is drawn 


\begin{DoxyParams}{Parameters}
{\em evt} & \\
\hline
{\em x\+\_\+len} & \\
\hline
{\em tolerance} & \\
\hline
\end{DoxyParams}
soltar botao esquerdo --$>$ verifica inclinacao e deslocamento em x inclinacao $>$ 1 delta x $>$ x\+\_\+len

movimentacao durante o desenho da linha verifica que deslocamentos(grandes) nao podem ser negativos verifica \char`\"{}pequenos\char`\"{} deslocamentos negativos

soltar botao direito --$>$ verifica inclinacao e deslocamento em x inclinacao $>$ 1 delta x $>$ x\+\_\+len

movimentacao durante o desenho da linha verifica que deslocamentos(grandes) nao podem ser negativos verifica \char`\"{}pequenos\char`\"{} deslocamentos negativos \mbox{\Hypertarget{mouse_8c_a210374b50462acdedab00df64d5cea3c}\label{mouse_8c_a210374b50462acdedab00df64d5cea3c}} 
\index{mouse.\+c@{mouse.\+c}!mouse\+\_\+ih@{mouse\+\_\+ih}}
\index{mouse\+\_\+ih@{mouse\+\_\+ih}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{mouse\+\_\+ih()}{mouse\_ih()}}
{\footnotesize\ttfamily void() mouse\+\_\+ih (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}

Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=243pt]{mouse_8c_a210374b50462acdedab00df64d5cea3c_cgraph}
\end{center}
\end{figure}
\mbox{\Hypertarget{mouse_8c_a354be65898ab3c1972788a51bc7e9e5a}\label{mouse_8c_a354be65898ab3c1972788a51bc7e9e5a}} 
\index{mouse.\+c@{mouse.\+c}!mouse\+\_\+process\+\_\+packets@{mouse\+\_\+process\+\_\+packets}}
\index{mouse\+\_\+process\+\_\+packets@{mouse\+\_\+process\+\_\+packets}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{mouse\+\_\+process\+\_\+packets()}{mouse\_process\_packets()}}
{\footnotesize\ttfamily void mouse\+\_\+process\+\_\+packets (\begin{DoxyParamCaption}\item[{struct packet $\ast$}]{pp }\end{DoxyParamCaption})}



Receives an incomplete packet and parses it. 


\begin{DoxyParams}{Parameters}
{\em pp} & \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{mouse_8c_a9da18257ff113b686bb826d154bfaa87}\label{mouse_8c_a9da18257ff113b686bb826d154bfaa87}} 
\index{mouse.\+c@{mouse.\+c}!mouse\+\_\+subscribe\+\_\+int@{mouse\+\_\+subscribe\+\_\+int}}
\index{mouse\+\_\+subscribe\+\_\+int@{mouse\+\_\+subscribe\+\_\+int}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{mouse\+\_\+subscribe\+\_\+int()}{mouse\_subscribe\_int()}}
{\footnotesize\ttfamily int mouse\+\_\+subscribe\+\_\+int (\begin{DoxyParamCaption}\item[{uint8\+\_\+t $\ast$}]{bit\+\_\+no }\end{DoxyParamCaption})}



Subscribes mouse interrupts. 

\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
\mbox{\Hypertarget{mouse_8c_a685ad2706aca36d9869a30a19b9f446a}\label{mouse_8c_a685ad2706aca36d9869a30a19b9f446a}} 
\index{mouse.\+c@{mouse.\+c}!mouse\+\_\+unsubscribe\+\_\+int@{mouse\+\_\+unsubscribe\+\_\+int}}
\index{mouse\+\_\+unsubscribe\+\_\+int@{mouse\+\_\+unsubscribe\+\_\+int}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{mouse\+\_\+unsubscribe\+\_\+int()}{mouse\_unsubscribe\_int()}}
{\footnotesize\ttfamily int mouse\+\_\+unsubscribe\+\_\+int (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Unsubscribes mouse interrupts. 

\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
\mbox{\Hypertarget{mouse_8c_af705497321f2987d5d850326bbbdaa00}\label{mouse_8c_af705497321f2987d5d850326bbbdaa00}} 
\index{mouse.\+c@{mouse.\+c}!write\+\_\+command@{write\+\_\+command}}
\index{write\+\_\+command@{write\+\_\+command}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{write\+\_\+command()}{write\_command()}}
{\footnotesize\ttfamily int write\+\_\+command (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{command }\end{DoxyParamCaption})}



Writes byte to mouse. 


\begin{DoxyParams}{Parameters}
{\em command} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=270pt]{mouse_8c_af705497321f2987d5d850326bbbdaa00_cgraph}
\end{center}
\end{figure}


\subsection{Variable Documentation}
\mbox{\Hypertarget{mouse_8c_a96f44d20f1dbf1c8785a7bc99a46164c}\label{mouse_8c_a96f44d20f1dbf1c8785a7bc99a46164c}} 
\index{mouse.\+c@{mouse.\+c}!byte@{byte}}
\index{byte@{byte}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{byte}{byte}}
{\footnotesize\ttfamily uint8\+\_\+t byte}

\mbox{\Hypertarget{mouse_8c_a67f46e33de30d253017c715ed5b3d64e}\label{mouse_8c_a67f46e33de30d253017c715ed5b3d64e}} 
\index{mouse.\+c@{mouse.\+c}!event@{event}}
\index{event@{event}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{event}{event}}
{\footnotesize\ttfamily struct mouse\+\_\+ev event}

\mbox{\Hypertarget{mouse_8c_afc170e6da803f15497a6b9eec2652975}\label{mouse_8c_afc170e6da803f15497a6b9eec2652975}} 
\index{mouse.\+c@{mouse.\+c}!mouse\+\_\+hook\+ID@{mouse\+\_\+hook\+ID}}
\index{mouse\+\_\+hook\+ID@{mouse\+\_\+hook\+ID}!mouse.\+c@{mouse.\+c}}
\subsubsection{\texorpdfstring{mouse\+\_\+hook\+ID}{mouse\_hookID}}
{\footnotesize\ttfamily int mouse\+\_\+hook\+ID}

