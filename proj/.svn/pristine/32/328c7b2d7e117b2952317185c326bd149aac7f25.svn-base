\hypertarget{keyboard_8h}{}\section{keyboard.\+h File Reference}
\label{keyboard_8h}\index{keyboard.\+h@{keyboard.\+h}}
{\ttfamily \#include \char`\"{}i8042.\+h\char`\"{}}\newline
Include dependency graph for keyboard.\+h\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=145pt]{keyboard_8h__incl}
\end{center}
\end{figure}
This graph shows which files directly or indirectly include this file\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=271pt]{keyboard_8h__dep__incl}
\end{center}
\end{figure}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
int() \hyperlink{keyboard_8h_a02884ada1971dbade466081413210b18}{kbc\+\_\+subscribe\+\_\+int} (uint8\+\_\+t $\ast$bit\+\_\+no)
\begin{DoxyCompactList}\small\item\em Subscribes keyboard interrupts. \end{DoxyCompactList}\item 
int() \hyperlink{keyboard_8h_a1102381e6a9e876e05dd78c58ccb5673}{kbc\+\_\+unsubscribe\+\_\+int} ()
\begin{DoxyCompactList}\small\item\em Unsubscribes keyboard interrupts. \end{DoxyCompactList}\item 
int() \hyperlink{keyboard_8h_a79a031a8611f5b2d6afa4158e92b0fb4}{util\+\_\+sys\+\_\+inb} (int port, uint8\+\_\+t $\ast$value)
\begin{DoxyCompactList}\small\item\em Mask function of sys\+\_\+inb(port\+\_\+t port, uint32\+\_\+t $\ast$byte) \end{DoxyCompactList}\item 
void \hyperlink{keyboard_8h_a98f70aee8a1c8f087ddd363dd3149866}{process\+Key\+Scancode} (uint8\+\_\+t scancode)
\begin{DoxyCompactList}\small\item\em Processes the scancode. Checks if it is a make or a break code, gets it\textquotesingle{}s size in bytes and gets an array with size elements, with the scancode bytes. \end{DoxyCompactList}\item 
int \hyperlink{keyboard_8h_adba545b58409322e070c484942f29b92}{read\+Command\+Byte} (uint8\+\_\+t command\+\_\+byte)
\begin{DoxyCompactList}\small\item\em Reads from the output buffer 0x60. \end{DoxyCompactList}\item 
int \hyperlink{keyboard_8h_ad5f628ce178177844595f0c5ec79d017}{write\+Command\+Byte} (uint8\+\_\+t command\+\_\+byte)
\begin{DoxyCompactList}\small\item\em Writes to the output buffer 0x60. \end{DoxyCompactList}\item 
int \hyperlink{keyboard_8h_ab58c395d0715d93817b36b8d9a77c808}{process\+Command\+Byte} (uint8\+\_\+t command\+\_\+byte)
\begin{DoxyCompactList}\small\item\em Checks status register and if input\+Buffer is full. \end{DoxyCompactList}\item 
void \hyperlink{keyboard_8h_ac4b3f0121a2ac45668528454fbf14f64}{enable\+Interrupts} ()
\begin{DoxyCompactList}\small\item\em Enables Minix interrupts. \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Function Documentation}
\mbox{\Hypertarget{keyboard_8h_ac4b3f0121a2ac45668528454fbf14f64}\label{keyboard_8h_ac4b3f0121a2ac45668528454fbf14f64}} 
\index{keyboard.\+h@{keyboard.\+h}!enable\+Interrupts@{enable\+Interrupts}}
\index{enable\+Interrupts@{enable\+Interrupts}!keyboard.\+h@{keyboard.\+h}}
\subsubsection{\texorpdfstring{enable\+Interrupts()}{enableInterrupts()}}
{\footnotesize\ttfamily void enable\+Interrupts (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Enables Minix interrupts. 

\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=350pt]{keyboard_8h_ac4b3f0121a2ac45668528454fbf14f64_cgraph}
\end{center}
\end{figure}
\mbox{\Hypertarget{keyboard_8h_a02884ada1971dbade466081413210b18}\label{keyboard_8h_a02884ada1971dbade466081413210b18}} 
\index{keyboard.\+h@{keyboard.\+h}!kbc\+\_\+subscribe\+\_\+int@{kbc\+\_\+subscribe\+\_\+int}}
\index{kbc\+\_\+subscribe\+\_\+int@{kbc\+\_\+subscribe\+\_\+int}!keyboard.\+h@{keyboard.\+h}}
\subsubsection{\texorpdfstring{kbc\+\_\+subscribe\+\_\+int()}{kbc\_subscribe\_int()}}
{\footnotesize\ttfamily int() kbc\+\_\+subscribe\+\_\+int (\begin{DoxyParamCaption}\item[{uint8\+\_\+t $\ast$}]{bit\+\_\+no }\end{DoxyParamCaption})}



Subscribes keyboard interrupts. 

\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
\mbox{\Hypertarget{keyboard_8h_a1102381e6a9e876e05dd78c58ccb5673}\label{keyboard_8h_a1102381e6a9e876e05dd78c58ccb5673}} 
\index{keyboard.\+h@{keyboard.\+h}!kbc\+\_\+unsubscribe\+\_\+int@{kbc\+\_\+unsubscribe\+\_\+int}}
\index{kbc\+\_\+unsubscribe\+\_\+int@{kbc\+\_\+unsubscribe\+\_\+int}!keyboard.\+h@{keyboard.\+h}}
\subsubsection{\texorpdfstring{kbc\+\_\+unsubscribe\+\_\+int()}{kbc\_unsubscribe\_int()}}
{\footnotesize\ttfamily int() kbc\+\_\+unsubscribe\+\_\+int (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Unsubscribes keyboard interrupts. 

\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
\mbox{\Hypertarget{keyboard_8h_ab58c395d0715d93817b36b8d9a77c808}\label{keyboard_8h_ab58c395d0715d93817b36b8d9a77c808}} 
\index{keyboard.\+h@{keyboard.\+h}!process\+Command\+Byte@{process\+Command\+Byte}}
\index{process\+Command\+Byte@{process\+Command\+Byte}!keyboard.\+h@{keyboard.\+h}}
\subsubsection{\texorpdfstring{process\+Command\+Byte()}{processCommandByte()}}
{\footnotesize\ttfamily int process\+Command\+Byte (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{command\+\_\+byte }\end{DoxyParamCaption})}



Checks status register and if input\+Buffer is full. 


\begin{DoxyParams}{Parameters}
{\em command\+\_\+byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=300pt]{keyboard_8h_ab58c395d0715d93817b36b8d9a77c808_cgraph}
\end{center}
\end{figure}
\mbox{\Hypertarget{keyboard_8h_a98f70aee8a1c8f087ddd363dd3149866}\label{keyboard_8h_a98f70aee8a1c8f087ddd363dd3149866}} 
\index{keyboard.\+h@{keyboard.\+h}!process\+Key\+Scancode@{process\+Key\+Scancode}}
\index{process\+Key\+Scancode@{process\+Key\+Scancode}!keyboard.\+h@{keyboard.\+h}}
\subsubsection{\texorpdfstring{process\+Key\+Scancode()}{processKeyScancode()}}
{\footnotesize\ttfamily void process\+Key\+Scancode (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{scancode }\end{DoxyParamCaption})}



Processes the scancode. Checks if it is a make or a break code, gets it\textquotesingle{}s size in bytes and gets an array with size elements, with the scancode bytes. 


\begin{DoxyParams}{Parameters}
{\em scancode} & \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{keyboard_8h_adba545b58409322e070c484942f29b92}\label{keyboard_8h_adba545b58409322e070c484942f29b92}} 
\index{keyboard.\+h@{keyboard.\+h}!read\+Command\+Byte@{read\+Command\+Byte}}
\index{read\+Command\+Byte@{read\+Command\+Byte}!keyboard.\+h@{keyboard.\+h}}
\subsubsection{\texorpdfstring{read\+Command\+Byte()}{readCommandByte()}}
{\footnotesize\ttfamily int read\+Command\+Byte (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{command\+\_\+byte }\end{DoxyParamCaption})}



Reads from the output buffer 0x60. 


\begin{DoxyParams}{Parameters}
{\em command\+\_\+byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=285pt]{keyboard_8h_adba545b58409322e070c484942f29b92_cgraph}
\end{center}
\end{figure}
\mbox{\Hypertarget{keyboard_8h_a79a031a8611f5b2d6afa4158e92b0fb4}\label{keyboard_8h_a79a031a8611f5b2d6afa4158e92b0fb4}} 
\index{keyboard.\+h@{keyboard.\+h}!util\+\_\+sys\+\_\+inb@{util\+\_\+sys\+\_\+inb}}
\index{util\+\_\+sys\+\_\+inb@{util\+\_\+sys\+\_\+inb}!keyboard.\+h@{keyboard.\+h}}
\subsubsection{\texorpdfstring{util\+\_\+sys\+\_\+inb()}{util\_sys\_inb()}}
{\footnotesize\ttfamily int() util\+\_\+sys\+\_\+inb (\begin{DoxyParamCaption}\item[{int}]{port,  }\item[{uint8\+\_\+t $\ast$}]{value }\end{DoxyParamCaption})}



Mask function of sys\+\_\+inb(port\+\_\+t port, uint32\+\_\+t $\ast$byte) 

\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
\mbox{\Hypertarget{keyboard_8h_ad5f628ce178177844595f0c5ec79d017}\label{keyboard_8h_ad5f628ce178177844595f0c5ec79d017}} 
\index{keyboard.\+h@{keyboard.\+h}!write\+Command\+Byte@{write\+Command\+Byte}}
\index{write\+Command\+Byte@{write\+Command\+Byte}!keyboard.\+h@{keyboard.\+h}}
\subsubsection{\texorpdfstring{write\+Command\+Byte()}{writeCommandByte()}}
{\footnotesize\ttfamily int write\+Command\+Byte (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{command\+\_\+byte }\end{DoxyParamCaption})}



Writes to the output buffer 0x60. 


\begin{DoxyParams}{Parameters}
{\em command\+\_\+byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Return 0 upon success and non-\/zero otherwise 
\end{DoxyReturn}
